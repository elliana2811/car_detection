name: Airflow CI/CD on Self-Hosted Runner

on:
  push:
    branches:
      - ci-cd-test 

env:
  # THAY THẾ BẰNG TÊN IMAGE VÀ DOCKER COMPOSE FILE CỦA BẠN
  IMAGE_NAME: elliana2811/car_detection
  DOCKER_COMPOSE_FILE: docker-compose.prod.yml # Tên file docker-compose trong repo

jobs:
  build-and-push-image:
    name: Build and Push Airflow Docker Image
    runs-on: ubuntu-latest # <<---- THAY ĐỔI Ở ĐÂY
    # ... (phần còn lại của job build-and-push-image giữ nguyên) ...
    outputs:
      image_tag_sha: ${{ steps.meta.outputs.version }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # Cân nhắc nâng cấp lên v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2 # Cân nhắc nâng cấp lên v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short 
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: ./data_pipeline/flow 
          file: ./data_pipeline/flow/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha 
          cache-to: type=gha,mode=max 

  deploy-airflow:
    name: Deploy Airflow Services
    runs-on: self-hosted 
    needs: build-and-push-image 
    
    steps:
      - name: Checkout Repository (để có docker-compose.yaml)
        uses: actions/checkout@v4

      - name: Create .env file from GitHub Secret
        # Điều kiện 'if' này đảm bảo step chỉ chạy nếu secret ENV_FILE_CONTENT tồn tại và không rỗng
        if: ${{ secrets.ENV_FILE_CONTENT != '' && secrets.ENV_FILE_CONTENT != null }} # <<---- ĐÃ SỬA LỖI
        # Hoặc đơn giản hơn nếu bạn chỉ muốn kiểm tra sự tồn tại của secret (nó sẽ là chuỗi rỗng nếu không được đặt):
        # if: ${{ secrets.ENV_FILE_CONTENT }} 
        # Tuy nhiên, kiểm tra khác rỗng và null sẽ an toàn hơn.
        run: |
          # Sử dụng PowerShell để ghi nội dung (có thể nhiều dòng) của secret vào file .env
          Write-Host "Attempting to create .env file from secret..."
          Set-Content -Path ".env" -Value "${{ secrets.ENV_FILE_CONTENT }}"
          Write-Host ".env file created successfully from secret."
        shell: powershell 

      # Bước này để xác minh rằng file .env đã được tạo thành công từ secret
      - name: Verify .env file existence (after creation from secret)
        run: |
          $envFilePath = ".env"
          if (-not (Test-Path $envFilePath -PathType Leaf)) { 
            Write-Error "ERROR: .env file was NOT created or not found at '$($envFilePath)' in the checkout directory (current directory: $(Get-Location))."
            Write-Host "Please check if the 'ENV_FILE_CONTENT' secret is correctly set in GitHub repository settings and the previous step ran successfully (check its 'if' condition)."
            exit 1
          } else {
            Write-Host ".env file verified successfully at '$($envFilePath)' after creation from secret."
          }
        shell: powershell

      - name: Pull latest pushed image
        run: docker pull ${{ env.IMAGE_NAME }}:latest 
        shell: powershell 

      - name: Restart Airflow services using Docker Compose
        run: |
          Write-Host "Restarting Airflow services with the new image..."
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d --remove-orphans airflow-webserver airflow-scheduler airflow-init
          Write-Host "Airflow services deployment attempted."
        shell: powershell